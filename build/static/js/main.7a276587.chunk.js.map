{"version":3,"sources":["store/frontend.js","serviceWorker.js","index.js"],"names":["Frontend","Store","_classCallCheck","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","data","localStorage","getItem","undefined","login","registerPage","userData","observable","action","par","_this","profileDrawer","_this2","_this3","_this4","__webpack_require__","r","__webpack_exports__","d","register","unregister","window","axios","require","uniqid","instance","create","defaults","baseUrl","location","origin","timeout","isLocalhost","Boolean","hostname","match","config","navigator","URL","process","href","addEventListener","swUrl","concat","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","react_spinkit__WEBPACK_IMPORTED_MODULE_2__","react_spinkit__WEBPACK_IMPORTED_MODULE_2___default","react_loadable__WEBPACK_IMPORTED_MODULE_3__","react_loadable__WEBPACK_IMPORTED_MODULE_3___default","mobx_react__WEBPACK_IMPORTED_MODULE_4__","_store_frontend__WEBPACK_IMPORTED_MODULE_5__","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_6__","_serviceWorker__WEBPACK_IMPORTED_MODULE_7__","theme","createMuiTheme","Prov","props","a","createElement","store","children","LoadableComponent","Loadable","loader","Promise","all","e","bind","loading","className","name","color","delay","preloadReady","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a276587.chunk.js","sourcesContent":["import { observable, action } from \"mobx\";\n\nclass Store {\n  constructor() {\n    let data = localStorage.getItem(\"data\");\n    if (data != undefined && data != null) {\n      this.login = true;\n      this.registerPage = false;\n      this.userData = data;\n    }\n  }\n\n  @observable login = false;\n  @observable registerPage = true;\n  @observable userData = {};\n  @observable profileDrawer = false;\n\n  @action update_profileDrawer = par => (this.profileDrawer = par);\n  @action update_login = par => (this.login = par);\n  @action update_registerPage = par => (this.registerPage = par);\n  @action update_userData = par => (this.userData = par);\n}\n\nconst Frontend = new Store();\n\nexport default Frontend;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n// const ago = require(\"javascript-time-ago\");\n// const lang = require(\"javascript-time-ago/locale/tr\");\n// ago.addLocale(lang);\n\n// //window customization\n// window.timeAgo = new TimeAgo(\"tr-TR\");\nwindow.axios = require(\"axios\");\nwindow.uniqid = require(\"uniqid\");\n\n//axios customization\nconst instance = window.axios.create();\ninstance.defaults.baseUrl = window.location.origin;\ninstance.defaults.timeout = 2500;\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Spinner from \"react-spinkit\";\nimport Loadable from \"react-loadable\";\nimport { Provider } from \"mobx-react\";\nimport Frontend from \"./store/frontend\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst theme = createMuiTheme();\n\n// install();\n\nconst Prov = props => (\n  <MuiThemeProvider theme={theme}>\n    <Provider store={Frontend}>{props.children}</Provider>\n  </MuiThemeProvider>\n);\nconst LoadableComponent = Loadable({\n  loader: () => import(\"./backend/router/index\"),\n  loading: () => (\n    <div className='loaderScreen'>\n      <Spinner name='line-scale-pulse-out' color='fuchsia' />\n    </div>\n  ),\n  delay: 10000,\n  timeout: 15000\n});\n\nLoadable.preloadReady().then(() => {\n  ReactDOM.render(\n    <Prov>\n      <LoadableComponent />\n    </Prov>,\n    document.getElementById(\"root\")\n  );\n});\nserviceWorker.unregister();\n"],"sourceRoot":""}