(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[37],{

/***/ "./src/utils/validate.options.js":
/*!***************************************!*\
  !*** ./src/utils/validate.options.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar moment = __webpack_require__(/*! moment */ \"./node_modules/moment/moment.js\");\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (validate, language) {\n  validate.extend(validate.validators.datetime, {\n    // The value is guaranteed not to be null or undefined but otherwise it\n    // could be anything.\n    parse: function parse(value, options) {\n      return +moment.utc(value);\n    },\n    // Input is a unix timestamp\n    format: function format(value, options) {\n      var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n      return moment.utc(value).format(format);\n    }\n  });\n  return {\n    email: {\n      // Email is required\n      presence: true,\n      // and must be an email (duh)\n      email: true\n    },\n    password: {\n      // Password is also required\n      presence: true,\n      // And must be at least 5 characters long\n      length: {\n        minimum: 5\n      }\n    },\n    \"confirm-password\": {\n      // You need to confirm your password\n      presence: true,\n      // and it needs to be equal to the other password\n      equality: {\n        attribute: \"password\",\n        message: \"^The passwords does not match\"\n      }\n    },\n    username: {\n      // You need to pick a username too\n      presence: true,\n      // And it must be between 3 and 20 characters long\n      length: {\n        minimum: 3,\n        maximum: 20\n      },\n      format: {\n        // We don't allow anything that a-z and 0-9\n        pattern: \"[a-z0-9]+\",\n        // but we don't care if the username is uppercase or lowercase\n        flags: \"i\",\n        message: \"can only contain a-z and 0-9\"\n      }\n    },\n    birthdate: {\n      // The user needs to give a birthday\n      presence: true,\n      // and must be born at least 18 years ago\n      date: {\n        latest: moment().subtract(18, \"years\"),\n        message: \"^You must be at least 18 years old to use this service\"\n      }\n    },\n    country: {\n      // You also need to input where you live\n      presence: true,\n      // And we restrict the countries supported to Sweden\n      inclusion: {\n        within: [\"SE\"],\n        // The ^ prevents the field name from being prepended to the error\n        message: \"^Sorry, this service is for Sweden only\"\n      }\n    },\n    zip: {\n      // Zip is optional but if specified it must be a 5 digit long number\n      format: {\n        pattern: \"\\\\d{5}\"\n      }\n    },\n    \"number-of-children\": {\n      presence: true,\n      // Number of children has to be an integer >= 0\n      numericality: {\n        onlyInteger: true,\n        greaterThanOrEqualTo: 0\n      }\n    },\n    creditCardNumber: {\n      presence: true,\n      format: {\n        pattern: /^(34|37|4|5[1-5]).*$/,\n        message: function message(value, attribute, validatorOptions, attributes, globalOptions) {\n          return validate.format(\"^%{num} is not a valid credit card number\", {\n            num: value\n          });\n        }\n      },\n      length: function length(value, attributes, attributeName, options, constraints) {\n        if (value) {\n          // Amex\n          if (/^(34|37).*$/.test(value)) return {\n            is: 15\n          }; // Visa, Mastercard\n\n          if (/^(4|5[1-5]).*$/.test(value)) return {\n            is: 16\n          };\n        } // Unknown card, don't validate length\n\n\n        return false;\n      },\n      creditCardZip: function creditCardZip(value, attributes, attributeName, options, constraints) {\n        if (!/^(34|37).*$/.test(attributes.creditCardNumber)) return null;\n        return {\n          presence: {\n            message: \"is required when using AMEX\"\n          },\n          length: {\n            is: 5\n          }\n        };\n      }\n    },\n    numberOfChildren: {\n      presence: true,\n      // Number of children has to be an integer >= 0\n      numericality: {\n        onlyInteger: true,\n        greaterThanOrEqualTo: 0\n      }\n    },\n    url: {\n      url: true\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/validate.options.js\n");

/***/ })

}]);